"use strict";
/**
 * Converts a W3C `ReadableStreamDefaultReader` into a `Deno.Reader`.
 *
 * Implements a constrained buffer to handle backpressure.
 *
 * @param reader The `ReadableStreamDefaultReader` to read from.
 * @param contentLength The total number of bytes in the request to be
 *    passed through the reader. Used to allocate required buffer memory.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const readerToDenoReader = (reader, contentLength) => {
    const buffer = new Uint8Array(contentLength);
    let bufferEndIndex = 0;
    let bufferReadStartIndex = 0;
    return {
        read: (p) => __awaiter(void 0, void 0, void 0, function* () {
            // If `0` contentLength has been passed (indicating an empty request), return
            // `null` immediately
            if (!contentLength)
                return null;
            // Once all data has been read out of the buffer, return `null` to
            // signal EOF
            if (bufferReadStartIndex > contentLength - 1)
                return null;
            const { value } = yield reader.read();
            if (value) {
                // Push value into buffer
                buffer.set(value, bufferEndIndex);
                bufferEndIndex += value.length;
            }
            // If all buffered data has been written after at least one call to `.read()`
            // (regardless of content length), return `null` early. This could indicate
            // a value for `contentLength` that is too large.
            if (bufferReadStartIndex === bufferEndIndex)
                return null;
            // Create a view of the buffer to read out, no larger than `p.length`
            const maxReadableLength = p.length;
            const bufferReadEndIndex = Math.min(bufferReadStartIndex + maxReadableLength, bufferEndIndex);
            const bufferReadView = buffer.subarray(bufferReadStartIndex, bufferReadEndIndex);
            p.set(bufferReadView);
            bufferReadStartIndex = bufferReadEndIndex;
            // Return the length of data pushed into `p`.
            return bufferReadView.length;
        })
    };
};
exports.default = readerToDenoReader;
//# sourceMappingURL=readerToDenoReader.js.map