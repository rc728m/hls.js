import Config from './Config';
import { BaseTransformStream } from "./Platform/index";
import CallbackWithSelf from './Types/CallbackWithSelf';
/**
 * A duplex stream transformer implementation, extending Node's built-in
 * `Transform` class. Receives input via a writable stream from a data
 * buffer (e.g. an HTTP request), and throttles output to a defined maximum
 * number of bytes per a defined interval.
 *
 * Configuration is received from a parent `BandwidthThrottleGroup` instance,
 * ensuring that available bandwidth is distributed evenly between all streams within
 * the group, mimicing the behaviour of overlapping network requests.
 */
declare class BandwidthThrottle extends BaseTransformStream {
    /**
     * A callback to be invoked when bytes are written
     * to the underlying `readable` stream. Used as a hook
     * for testing to confirm output rate.
     */
    onBytesWritten: ((chunk: Uint8Array) => void) | null;
    private pendingBytesBuffer;
    private pendingBytesCount;
    private pendingBytesReadIndex;
    private config;
    private isDataBeingWritten;
    private handleRequestStart;
    private handleRequestStop;
    private handleRequestDestroy;
    private done;
    constructor(
    /**
     * An object of configuration values provided by the
     * parent group.
     */
    config: Readonly<Config>, 
    /**
     * The total number of bytes in the request to be throttled, to be used to define memory
     * allocation.
     */
    contentLength: number, 
    /**
     * A handler to be invoked whenever a request starts processing data,
     * so that the parent group can increment of the total number of
     * requests in flight across the group.
     */
    handleRequestStart: CallbackWithSelf, 
    /**
     * A handler to be invoked whenever a request stops processing
     * data, so that the parent group can decrement of the total
     * number of requests in flight across the group.
     */
    handleRequestEnd: CallbackWithSelf, 
    /**
     * A handler to be invoked when a request has finished processing all
     * data for a request, and the throttle is no longer needed.
     */
    handleRequestDestroy: CallbackWithSelf);
    /**
     * To be called when the request being throttled is aborted in
     * order to rebalance the available bandwidth.
     */
    abort(): void;
    /**
     * Extracts a number of bytes from the pending bytes queue and
     * pushes it out to a piped writable stream.
     *
     * @returns The number of bytes processed through the throttle
     */
    process(maxBytesToProcess?: number): number;
    /**
     * Informs the parent group that the throttle is no longer needed and can
     * be released. Once a throttle is destroyed, it can not be used again.
     */
    destroy(): void;
    /**
     * Invoked internally whenever data is received from the underlying
     * writeable stream. Resolves a promise when done.
     *
     * @param chunk A chunk of data in the form of a typed array of arbitrary length.
     */
    private transform;
    /**
     * Invoked once all data has been passed to the stream, and resolving a promise
     * when all data has been processed.
     */
    private flush;
}
export default BandwidthThrottle;
