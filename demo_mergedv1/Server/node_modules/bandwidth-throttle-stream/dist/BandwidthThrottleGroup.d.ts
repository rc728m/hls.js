import BandwidthThrottle from './BandwidthThrottle';
import Config from './Config';
import IConfig from './Interfaces/IConfig';
import IThroughputData from './Interfaces/IThroughputData';
/**
 * A class used to configure and bridge between one or more
 * `BandwidthThrottle` instances, ensuring that the defined
 * available bandwidth is distributed as equally as possible
 * between any simultaneous requests.
 *
 * A `BandwidthThrottleGroup` instance must always be created
 * before attaching individual `throttle` instances to it via
 * its `createBandwidthThrottle()` method.
 */
declare class BandwidthThrottleGroup {
    config: Readonly<Config>;
    /**
     * An optional callback providing the consumer with metrics pertaining to the throttle
     * group's average throughput and utlization percentage.
     */
    onThroughputMetrics: ((throughputData: IThroughputData) => void) | null;
    private inFlightRequests;
    private bandwidthThrottles;
    private clockIntervalId;
    private pollThroughputIntervalId;
    private lastTickTime;
    private tickIndex;
    private secondIndex;
    private totalBytesProcessed;
    private get hasTicked();
    private get isTicking();
    /**
     * @param options Consumer-provided options defining the
     *  throttling behaviour.
     */
    constructor(options: IConfig);
    configure(options: IConfig): void;
    /**
     * Creates and returns a pipeable `BandwidthThrottle` transform stream,
     * and attaches it to the group.
     *
     * @param contentLength The total number of bytes for the request to be throttled.
     */
    createBandwidthThrottle(contentLength: number): BandwidthThrottle;
    /**
     * Destroys all bandwidth throttle instances in the group, terminating
     * any running intervals, such that the entire group may be garbage
     * collected.
     */
    destroy(): void;
    /**
     * Increments the number of "in-flight" requests when a request in any
     * attached `BandwidthThrottle` instance starts.
     */
    private handleRequestStart;
    /**
     * Removes the reference of a throttle from the `inFlightRequests` array
     * in order to redistribute bandwidth while a request is inactive or after
     * it has ended.
     *
     * If noÂ other in flight requets are active at that point, the internal
     * clock is stopped to save resources.
     */
    private handleRequestStop;
    /**
     * Releases a destroyed throttle from memory.
     */
    private handleRequestDestroy;
    /**
     * Starts the "clock" ensuring that all incoming data will be processed at
     * a constant rate, defined by `config.resolutionHz`.
     */
    private startClock;
    /**
     * Stops the clock and resets counters while no requests are active.
     */
    private stopClock;
    /**
     * On each tick, processes the maximum allowable amount of data
     * through each active request.
     */
    private processInFlightRequests;
    private pollThroughput;
}
export default BandwidthThrottleGroup;
